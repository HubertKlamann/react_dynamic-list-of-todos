{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","setSelectedTodo","selectedTodo","className","map","todo","cn","id","completed","title","type","onClick","TodoFilter","onFilterChange","typedTitle","setTypedTitle","useState","selectedOption","setSelectedOption","value","onChange","event","target","placeholder","style","pointerEvents","length","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","todoSelectedUser","setTodoSelectedUser","todoSelected","find","useEffect","userId","data","href","email","name","App","setTodos","filteredOption","setFilteredOption","visibleTodos","filter","toLowerCase","includes","trim","selected","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.48f7e18d.chunk.js","sourcesContent":["import cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype TodoListProps = {\n  todos: Todo[];\n  setSelectedTodo: (todoId: number) => void;\n  selectedTodo: number;\n};\n\nexport const TodoList: React.FC<TodoListProps> = ({\n  todos, setSelectedTodo, selectedTodo,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos?.map(todo => {\n          return (\n            <tr\n              data-cy=\"todo\"\n              key={todo.id}\n              className={cn({\n                'has-background-info-light': selectedTodo === todo.id,\n                '': selectedTodo !== todo.id,\n              })}\n            >\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed\n                  && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p className={`has-text-${todo.completed ? 'success' : 'danger'}`}>\n                  {todo.title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  title=\"button\"\n                  onClick={() => setSelectedTodo(todo.id)}\n                >\n                  <span className=\"icon\">\n                    <i className={cn({\n                      'far fa-eye-slash': selectedTodo === todo.id,\n                      'far fa-eye': selectedTodo !== todo.id,\n                    })}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { useState } from 'react';\n\ntype TodoFilterProps = {\n  onFilterChange: (selectedOption: string) => void;\n  typedTitle: string;\n  setTypedTitle: (title: string) => void;\n};\n\nexport const TodoFilter: React.FC<TodoFilterProps> = ({\n  onFilterChange, typedTitle, setTypedTitle,\n}) => {\n  const [selectedOption, setSelectedOption] = useState('all');\n\n  // eslint-disable-next-line max-len\n  const handleSelectChange: React.ChangeEventHandler<HTMLSelectElement> = (event) => {\n    const { value } = event.target;\n\n    setSelectedOption(value);\n    onFilterChange(value);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            title=\"select\"\n            value={selectedOption}\n            onChange={handleSelectChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={typedTitle}\n          onChange={(event) => setTypedTitle(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {typedTitle.length > 0\n            && (\n              // eslint-disable-next-line jsx-a11y/control-has-associated-label\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                title=\"delete\"\n                onClick={() => setTypedTitle('')}\n              />\n            )}\n\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype TodoModalProps = {\n  setSelectedTodo: (todoId: number) => void;\n  selectedTodo: number;\n  todos: Todo[];\n};\n\nexport const TodoModal: React.FC<TodoModalProps> = ({\n  setSelectedTodo, selectedTodo, todos,\n}) => {\n  const [todoSelectedUser, setTodoSelectedUser] = useState<User | null>(null);\n  const todoSelected: Todo | null = todos.find(todo => todo.id === selectedTodo)\n  || null;\n\n  useEffect(() => {\n    if (todoSelected) {\n      getUser(todoSelected?.userId)\n        .then((data) => {\n          setTodoSelectedUser(data);\n        });\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!todoSelectedUser ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todoSelected?.id}`}\n            </div>\n\n            {todoSelected\n            && (\n              // eslint-disable-next-line jsx-a11y/control-has-associated-label\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                title=\"close\"\n                onClick={() => setSelectedTodo(0)}\n              />\n            )}\n\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todoSelected?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong\n                className={cn({\n                  'has-text-success': todoSelected?.completed,\n                  'has-text-danger': !todoSelected?.completed,\n                })}\n              >\n                {todoSelected?.completed ? 'Done' : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${todoSelectedUser?.email}`}>\n                {todoSelectedUser && todoSelectedUser.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [filteredOption, setFilteredOption] = useState('all');\n  const [typedTitle, setTypedTitle] = useState('');\n  const [selectedTodo, setSelectedTodo] = useState<number>(0);\n\n  useEffect(() => {\n    getTodos()\n      .then((data) => {\n        setTodos(data);\n      });\n  }, []);\n\n  const handleFilterChange = (selected: string) => {\n    setFilteredOption(selected);\n  };\n\n  let filteredTodos;\n\n  if (filteredOption === 'active') {\n    filteredTodos = todos.filter(todo => !todo.completed);\n  } else if (filteredOption === 'completed') {\n    filteredTodos = todos.filter(todo => todo.completed);\n  } else {\n    filteredTodos = todos;\n  }\n\n  const visibleTodos = filteredTodos.filter((todo) => (\n    todo.title.toLowerCase().includes(typedTitle.trim().toLowerCase())\n  ));\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                onFilterChange={handleFilterChange}\n                typedTitle={typedTitle}\n                setTypedTitle={setTypedTitle}\n              />\n            </div>\n\n            <div className=\"block\">\n              {todos.length === 0 && <Loader />}\n              <TodoList\n                todos={visibleTodos}\n                setSelectedTodo={setSelectedTodo}\n                selectedTodo={selectedTodo}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          setSelectedTodo={setSelectedTodo}\n          todos={visibleTodos}\n          selectedTodo={selectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}