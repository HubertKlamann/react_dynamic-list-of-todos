{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","VisibleTodos.tsx","index.tsx"],"names":["TodoList","todos","setSelectedTodoId","selectedTodoId","className","map","todo","cn","id","completed","title","type","onClick","TodoFilter","onFilterChange","typedTitle","setTypedTitle","useState","selectedOption","setSelectedOption","value","onChange","event","target","placeholder","style","pointerEvents","length","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","todoSelectedUser","setTodoSelectedUser","todoSelected","find","useEffect","userId","data","catch","error","console","href","email","name","App","setTodos","filteredOption","setFilteredOption","visibleTodosResult","useMemo","filter","toLowerCase","includes","trim","getVisibleTodos","selected","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5a91abf9.chunk.js","sourcesContent":["import cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype TodoListProps = {\n  todos: Todo[];\n  setSelectedTodoId: (todoId: number) => void;\n  selectedTodoId: number;\n};\n\nexport const TodoList: React.FC<TodoListProps> = ({\n  todos, setSelectedTodoId, selectedTodoId,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos?.map(todo => (\n        <tr\n          data-cy=\"todo\"\n          key={todo.id}\n          className={cn({\n            'has-background-info-light': selectedTodoId === todo.id,\n            '': selectedTodoId !== todo.id,\n          })}\n        >\n          <td className=\"is-vcentered\">{todo.id}</td>\n          <td className=\"is-vcentered\">\n            {todo.completed\n                && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p className={`has-text-${todo.completed ? 'success' : 'danger'}`}>\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              title=\"button\"\n              onClick={() => setSelectedTodoId(todo.id)}\n            >\n              <span className=\"icon\">\n                <i className={cn({\n                  'far fa-eye-slash': selectedTodoId === todo.id,\n                  'far fa-eye': selectedTodoId !== todo.id,\n                })}\n                />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","import { useState } from 'react';\nimport { FilterOptions } from '../../types/FilterOptions';\n\ntype TodoFilterProps = {\n  onFilterChange: (selectedOption: FilterOptions) => void;\n  typedTitle: string;\n  setTypedTitle: (title: string) => void;\n};\n\nexport const TodoFilter: React.FC<TodoFilterProps> = ({\n  onFilterChange, typedTitle, setTypedTitle,\n}) => {\n  const [selectedOption, setSelectedOption] = useState<FilterOptions>('all');\n\n  const handleSelectChange: React.ChangeEventHandler<HTMLSelectElement> = (\n    event,\n  ) => {\n    const { value } = event.target;\n\n    setSelectedOption(value as FilterOptions);\n    onFilterChange(value as FilterOptions);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            title=\"select\"\n            value={selectedOption}\n            onChange={handleSelectChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={typedTitle}\n          onChange={(event) => setTypedTitle(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {typedTitle.length > 0\n            && (\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                title=\"delete\"\n                onClick={() => setTypedTitle('')}\n                aria-label=\"clearSearchButton\"\n              />\n            )}\n\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype TodoModalProps = {\n  setSelectedTodoId: (todoId: number) => void;\n  selectedTodoId: number;\n  todos: Todo[];\n};\n\nexport const TodoModal: React.FC<TodoModalProps> = ({\n  setSelectedTodoId, selectedTodoId, todos,\n}) => {\n  const [todoSelectedUser, setTodoSelectedUser] = useState<User | null>(null);\n  const todoSelected: Todo | null = todos.find(\n    todo => todo.id === selectedTodoId,\n  ) || null;\n\n  useEffect(() => {\n    if (todoSelected) {\n      getUser(todoSelected?.userId)\n        .then((data) => {\n          setTodoSelectedUser(data);\n        })\n        .catch((error) => {\n          // eslint-disable-next-line no-console\n          console.error('Eroor while fetching todos:', error);\n        });\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!todoSelectedUser ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todoSelected?.id}`}\n            </div>\n\n            {todoSelected\n            && (\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                title=\"close\"\n                onClick={() => setSelectedTodoId(0)}\n                aria-label=\"closeButton\"\n              />\n            )}\n\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todoSelected?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong\n                className={cn({\n                  'has-text-success': todoSelected?.completed,\n                  'has-text-danger': !todoSelected?.completed,\n                })}\n              >\n                {todoSelected?.completed ? 'Done' : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${todoSelectedUser?.email}`}>\n                {todoSelectedUser && todoSelectedUser.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { useEffect, useMemo, useState } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { getVisibleTodos } from './VisibleTodos';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { FilterOptions } from './types/FilterOptions';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [filteredOption, setFilteredOption] = useState<FilterOptions>('all');\n  const [typedTitle, setTypedTitle] = useState('');\n  const [selectedTodoId, setSelectedTodoId] = useState<number>(0);\n\n  useEffect(() => {\n    getTodos()\n      .then((data) => {\n        setTodos(data);\n      })\n      .catch((error) => {\n        // eslint-disable-next-line no-console\n        console.error('Eroor while fetching todos:', error);\n      });\n  }, []);\n\n  const handleFilterChange = (selected: FilterOptions) => {\n    setFilteredOption(selected);\n  };\n\n  const visibleTodosResult = useMemo(() => getVisibleTodos(todos,\n    filteredOption, typedTitle),\n  [todos, filteredOption, typedTitle]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                onFilterChange={handleFilterChange}\n                typedTitle={typedTitle}\n                setTypedTitle={setTypedTitle}\n              />\n            </div>\n\n            <div className=\"block\">\n              {todos.length === 0\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={visibleTodosResult}\n                    setSelectedTodoId={setSelectedTodoId}\n                    selectedTodoId={selectedTodoId}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodoId && (\n        <TodoModal\n          setSelectedTodoId={setSelectedTodoId}\n          todos={visibleTodosResult}\n          selectedTodoId={selectedTodoId}\n        />\n      )}\n    </>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { FilterOptions } from './types/FilterOptions';\n\nexport const getVisibleTodos = (todos: Todo[],\n  filteredOption: FilterOptions, typedTitle: string) => {\n  let filteredTodos;\n\n  if (filteredOption === 'active') {\n    filteredTodos = todos.filter(todo => !todo.completed);\n  } else if (filteredOption === 'completed') {\n    filteredTodos = todos.filter(todo => todo.completed);\n  } else {\n    filteredTodos = todos;\n  }\n\n  return filteredTodos.filter((todo) => (\n    todo.title.toLowerCase().includes(typedTitle.trim().toLowerCase())\n  ));\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}